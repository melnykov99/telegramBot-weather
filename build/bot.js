"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const grammy_1 = require("grammy");
const conversations_1 = require("@grammyjs/conversations");
const dotenv_1 = __importDefault(require("dotenv"));
const apiRequestClient_1 = require("./apiRequestClient");
const constants_1 = require("./constants");
const db_1 = require("./db");
const weatherService_1 = require("./weatherService");
dotenv_1.default.config();
const tgBotToken = process.env.TELEGRAM_BOT_TOKEN;
const bot = new grammy_1.Bot(tgBotToken);
bot.use((0, grammy_1.session)({ initial: () => ({}) }));
bot.use((0, conversations_1.conversations)());
//–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –±—É–¥–µ–º –≤—ã–≤–æ–¥–∏—Ç—å –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ
const mainKeyboard = new grammy_1.Keyboard()
    .text('–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è üåû').text('–ü–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞ üåÖ').row()
    .text('–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è üìä').text('–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π üîÆ').row()
    .text('–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ üåá');
//–∫—Ä–æ–Ω–∞. –∏–∑ –ë–î –¥–æ—Å—Ç–∞–µ–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ö –ø–æ–≥–æ–¥–æ–π.
/*cron.schedule('31 10 * * *', async () => {
    const data = await usersRepository.getAllUsers()
    console.log('–ù–∞—á–∞–ª–æ –∫—Ä–æ–Ω—ã')
    if (data === DB_RESULT.UNKNOWN_ERROR) {
        console.log('–æ—à–∏–±–∫–∞ –±–¥')
        return
    }
    const usersCount = data.rowCount
    console.log(usersCount)
    const usersData = data.rows
    const togetherDate = new Date().toISOString().split('T')[0]
    if(!usersCount) {
        console.log('–æ—à–∏–±–∫–∞, –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        return
    }
    console.log('–∫—Ä–æ–Ω–∞. –õ–æ–≥ –ø–µ—Ä–µ–¥ —Ü–∏–∫–ª–æ–º')
    for (let i = 0; i < usersCount; i++) {
        const chatId = usersData[i].chatId
        console.log('–∫—Ä–æ–Ω–∞ –≤ —Ü–∏–∫–ª–µ')
        console.log(usersData[i])
        const answer: string = await weatherService.forecastByDate(chatId, togetherDate)
        console.log(answer)
        await bot.api.sendMessage(usersData[i].chatId, answer, {parse_mode: "HTML", reply_markup: mainKeyboard})
        console.log('–∫—Ä–æ–Ω–∞ –≤ –∫–æ–Ω—Ü–µ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è')
    }
}, {timezone: 'Europe/Moscow'})
*/
//–∫–æ–Ω—Ç–µ–∫—Å—Ç
async function changeCity(conversation, ctx) {
    var _a, _b;
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ —á–∞—Ç');
    const newCityContext = await conversation.wait();
    const city = (_a = newCityContext.update.message) === null || _a === void 0 ? void 0 : _a.text;
    if (!city) {
        await ctx.reply('–û—à–∏–±–∫–∞! –Ø —É–º–µ—é –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç. <b>–ï—â—ë —Ä–∞–∑ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É</b> "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ üåá" –∏ –ø—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.', {
            parse_mode: "HTML",
            reply_markup: mainKeyboard
        });
        return;
    }
    const checkedCity = await apiRequestClient_1.apiRequestClient.checkCity(city);
    if (checkedCity === constants_1.API_RESULT.UNKNOWN_ERROR) {
        await ctx.reply(`–û—à–∏–±–∫–∞! –Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –∑–∞—Ç–µ–º<b>–µ—â—ë —Ä–∞–∑ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É</b> "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ üåá".`, {
            parse_mode: "HTML",
            reply_markup: mainKeyboard
        });
        return;
    }
    const chatId = (_b = newCityContext.chat) === null || _b === void 0 ? void 0 : _b.id;
    const updateResult = await db_1.usersRepository.updateCityByChatId(chatId, checkedCity);
    if (updateResult === constants_1.DB_RESULT.UNKNOWN_ERROR) {
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
    }
    await ctx.reply(`–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ\n–ó–∞–ø–∏—Å–∞–ª–∏ <b>${checkedCity}</b> –∫–∞–∫ —Ç–≤–æ–π –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥.`, {
        parse_mode: "HTML",
        reply_markup: mainKeyboard
    });
}
bot.use((0, conversations_1.createConversation)(changeCity));
//–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start. –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥
bot.command("start", async (ctx) => {
    await ctx.reply("–ù–∞–ø–∏—à–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–≤–æ–π <b>–≥–æ—Ä–æ–¥</b>‚ùóÔ∏è  \n–Ø –±—É–¥—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 0Ô∏è‚É£7Ô∏è‚É£:3Ô∏è‚É£0Ô∏è‚É£ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã. ", { parse_mode: "HTML" });
});
bot.hears("–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è üåû", async (ctx) => {
    const togetherDate = new Date().toISOString().split('T')[0];
    const answer = await weatherService_1.weatherService.forecastByDate(ctx.chat.id, togetherDate);
    await ctx.reply(answer, { parse_mode: "HTML", reply_markup: mainKeyboard });
});
bot.hears("–ü–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞ üåÖ", async (ctx) => {
    const currentDate = new Date();
    const tomorrowDate = currentDate.setDate(currentDate.getDate() + 1);
    const tomorrowDateISO = currentDate.toISOString();
    const answer = await weatherService_1.weatherService.forecastByDate(ctx.chat.id, tomorrowDateISO.split('T')[0]);
    await ctx.reply(answer, { parse_mode: "HTML", reply_markup: mainKeyboard });
});
bot.hears("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è üìä", async (ctx) => {
    const answer = await weatherService_1.weatherService.forecastThreeDays(ctx.chat.id);
    await ctx.reply(answer, { parse_mode: "HTML", reply_markup: mainKeyboard });
});
bot.hears('–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π üîÆ', async (ctx) => {
    const answer = await weatherService_1.weatherService.forecastFiveDays(ctx.chat.id);
    await ctx.reply(answer, { parse_mode: "HTML", reply_markup: mainKeyboard });
});
bot.hears("–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ üåá", async (ctx) => {
    await ctx.conversation.enter("changeCity");
});
//–†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
//–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Ç—Å–≤–∏–µ —Å –±–æ—Ç–æ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω–∞—á–∞–ª–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Å–≤–æ–π –≥–æ—Ä–æ–¥
bot.on("message", async (ctx) => {
    //–ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, —Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ.
    const city = ctx.message.text;
    const chatId = ctx.chat.id;
    if (!city) {
        await ctx.reply('–û—à–∏–±–∫–∞! –Ø —É–º–µ—é –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞');
        return;
    }
    //–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const checkUserInDB = await db_1.usersRepository.foundUserByChatId(chatId);
    //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î, —Ç–æ –ø–∏—Å–∞—Ç—å –æ–Ω –Ω–∞–º –Ω–µ –¥–æ–ª–∂–µ–Ω. –ù—É–∂–Ω–æ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∂–∏–º–∞—Ç—å.
    if (checkUserInDB[0].city) {
        await ctx.reply(`–£ —Ç–µ–±—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–æ—Ä–æ–¥ ${checkUserInDB[0].city}. –ù—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å? –ù–∞–∂–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.`, { reply_markup: mainKeyboard });
        return;
    }
    //–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–æ–¥, –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –∞–ø–∏ –ø–æ–≥–æ–¥—ã.
    const checkedCity = await apiRequestClient_1.apiRequestClient.checkCity(city);
    if (checkedCity === constants_1.API_RESULT.UNKNOWN_ERROR) {
        await ctx.reply('–û—à–∏–±–∫–∞! –Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–∑–∂–µ.');
        return;
    }
    //–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –≥–æ—Ä–æ–¥ –≤ –ë–î
    await db_1.usersRepository.addUser(chatId, checkedCity);
    //–°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –≤—Å—ë –æ–∫ –∏ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞
    await ctx.reply('–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ \n–¢–µ–ø–µ—Ä—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.üòä\n–ú–æ–∂–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –≤—Ä—É—á–Ω—É—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞ 3 –∏ 7 –¥–Ω–µ–π, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–∏–º–∞–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏.\n', { reply_markup: mainKeyboard });
    return;
});
exports.default = (0, grammy_1.webhookCallback)(bot, "http");
