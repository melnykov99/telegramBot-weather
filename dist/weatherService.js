"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.weatherService = void 0;
const apiRequestClient_1 = require("./apiRequestClient");
const utils_1 = require("./utils");
const constants_1 = require("./constants");
const db_1 = require("./db");
exports.weatherService = {
    forecastByDate(chatId, date) {
        return __awaiter(this, void 0, void 0, function* () {
            const city = yield db_1.usersRepository.foundCityByUserChatId(chatId);
            if (city === constants_1.DB_RESULT.NOT_FOUND) {
                return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥".';
            }
            if (city === constants_1.DB_RESULT.UNKNOWN_ERROR) {
                return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            }
            const response = yield apiRequestClient_1.apiRequestClient.forecastDate(city, date);
            if (response === constants_1.API_RESULT.UNKNOWN_ERROR) {
                return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            }
            const maxTemp = response.data.forecast.forecastday[0].day.maxtemp_c;
            const minTemp = response.data.forecast.forecastday[0].day.mintemp_c;
            const avgWind = response.data.forecast.forecastday[0].day.avgvis_km;
            const rainChance = response.data.forecast.forecastday[0].day.daily_chance_of_rain;
            const snowChance = response.data.forecast.forecastday[0].day.daily_chance_of_snow;
            const conditionIcon = (0, utils_1.handlerConditionCode)(response.data.forecast.forecastday[0].day.condition.code);
            const avgCondition = `${response.data.forecast.forecastday[0].day.condition.text.toLowerCase()} ${conditionIcon}`;
            const togetherDateRuFormat = (0, utils_1.changeDateRuFormat)(date);
            return `–ü–æ–≥–æ–¥–∞ <b>${togetherDateRuFormat}</b> –≤ –≥–æ—Ä–æ–¥–µ <b>${city}</b> üåá\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${avgCondition}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>${rainChance}%</b> üåß\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–µ–≥–∞: <b>${snowChance}%</b> ‚ùÑÔ∏è`;
        });
    },
    forecastThreeDays(chatId) {
        return __awaiter(this, void 0, void 0, function* () {
            const city = yield db_1.usersRepository.foundCityByUserChatId(chatId);
            if (city === constants_1.DB_RESULT.NOT_FOUND) {
                return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥".';
            }
            if (city === constants_1.DB_RESULT.UNKNOWN_ERROR) {
                return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            }
            const response = yield apiRequestClient_1.apiRequestClient.forecastDays(city, 3);
            if (response === constants_1.API_RESULT.UNKNOWN_ERROR) {
                return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            }
            const firstDayProp = {
                maxTemp: response.data.forecast.forecastday[0].day.maxtemp_c,
                minTemp: response.data.forecast.forecastday[0].day.mintemp_c,
                avgWind: response.data.forecast.forecastday[0].day.avgvis_km,
                rainChance: response.data.forecast.forecastday[0].day.daily_chance_of_rain,
                snowChance: response.data.forecast.forecastday[0].day.daily_chance_of_snow,
                conditionIcon: (0, utils_1.handlerConditionCode)(response.data.forecast.forecastday[0].day.condition.code),
                avgCondition: () => `${response.data.forecast.forecastday[0].day.condition.text.toLowerCase()} ${firstDayProp.conditionIcon}`,
                dateRuFormat: (0, utils_1.changeDateRuFormat)(response.data.forecast.forecastday[0].date)
            };
            const firstDayAnswer = `<b>${firstDayProp.dateRuFormat}</b>\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${firstDayProp.avgCondition()}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${firstDayProp.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${firstDayProp.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${firstDayProp.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>${firstDayProp.rainChance}%</b> üåß\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–µ–≥–∞: <b>${firstDayProp.snowChance}%</b> ‚ùÑÔ∏è`;
            const secondDayProp = {
                maxTemp: response.data.forecast.forecastday[1].day.maxtemp_c,
                minTemp: response.data.forecast.forecastday[1].day.mintemp_c,
                avgWind: response.data.forecast.forecastday[1].day.avgvis_km,
                rainChance: response.data.forecast.forecastday[1].day.daily_chance_of_rain,
                snowChance: response.data.forecast.forecastday[1].day.daily_chance_of_snow,
                conditionIcon: (0, utils_1.handlerConditionCode)(response.data.forecast.forecastday[1].day.condition.code),
                avgCondition: () => `${response.data.forecast.forecastday[1].day.condition.text.toLowerCase()} ${secondDayProp.conditionIcon}`,
                dateRuFormat: (0, utils_1.changeDateRuFormat)(response.data.forecast.forecastday[1].date)
            };
            const secondDayAnswer = `<b>${secondDayProp.dateRuFormat}</b>\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${secondDayProp.avgCondition()}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${secondDayProp.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${secondDayProp.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${secondDayProp.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>${secondDayProp.rainChance}%</b> üåß\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–µ–≥–∞: <b>${secondDayProp.snowChance}%</b> ‚ùÑÔ∏è`;
            const thirdDayProp = {
                maxTemp: response.data.forecast.forecastday[2].day.maxtemp_c,
                minTemp: response.data.forecast.forecastday[2].day.mintemp_c,
                avgWind: response.data.forecast.forecastday[2].day.avgvis_km,
                rainChance: response.data.forecast.forecastday[2].day.daily_chance_of_rain,
                snowChance: response.data.forecast.forecastday[2].day.daily_chance_of_snow,
                conditionIcon: (0, utils_1.handlerConditionCode)(response.data.forecast.forecastday[2].day.condition.code),
                avgCondition: () => `${response.data.forecast.forecastday[2].day.condition.text.toLowerCase()} ${thirdDayProp.conditionIcon}`,
                dateRuFormat: (0, utils_1.changeDateRuFormat)(response.data.forecast.forecastday[2].date)
            };
            const thirdDayAnswer = `<b>${thirdDayProp.dateRuFormat}</b>\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${thirdDayProp.avgCondition()}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${thirdDayProp.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${thirdDayProp.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${thirdDayProp.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>${thirdDayProp.rainChance}%</b> üåß\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–µ–≥–∞: <b>${thirdDayProp.snowChance}%</b> ‚ùÑÔ∏è`;
            return `–ü–æ–≥–æ–¥–∞ –Ω–∞ 3 –¥–Ω—è –≤ –≥–æ—Ä–æ–¥–µ <b>${city}üåá</b>\n\n${firstDayAnswer}\n\n${secondDayAnswer}\n\n${thirdDayAnswer}`;
        });
    },
    forecastFiveDays(chatId) {
        return __awaiter(this, void 0, void 0, function* () {
            const city = yield db_1.usersRepository.foundCityByUserChatId(chatId);
            if (city === constants_1.DB_RESULT.NOT_FOUND) {
                return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥".';
            }
            if (city === constants_1.DB_RESULT.UNKNOWN_ERROR) {
                return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            }
            const response = yield apiRequestClient_1.apiRequestClient.forecastDays(city, 3);
            if (response === constants_1.API_RESULT.UNKNOWN_ERROR) {
                return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            }
            const firstDayProp = {
                maxTemp: response.data.forecast.forecastday[0].day.maxtemp_c,
                minTemp: response.data.forecast.forecastday[0].day.mintemp_c,
                avgWind: response.data.forecast.forecastday[0].day.avgvis_km,
                rainChance: response.data.forecast.forecastday[0].day.daily_chance_of_rain,
                snowChance: response.data.forecast.forecastday[0].day.daily_chance_of_snow,
                conditionIcon: (0, utils_1.handlerConditionCode)(response.data.forecast.forecastday[0].day.condition.code),
                avgCondition: () => `${response.data.forecast.forecastday[0].day.condition.text.toLowerCase()} ${firstDayProp.conditionIcon}`,
                dateRuFormat: (0, utils_1.changeDateRuFormat)(response.data.forecast.forecastday[0].date)
            };
            const firstDayAnswer = `<b>${firstDayProp.dateRuFormat}</b>\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${firstDayProp.avgCondition()}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${firstDayProp.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${firstDayProp.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${firstDayProp.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>${firstDayProp.rainChance}%</b> üåß\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–µ–≥–∞: <b>${firstDayProp.snowChance}%</b> ‚ùÑÔ∏è`;
            const secondDayProp = {
                maxTemp: response.data.forecast.forecastday[1].day.maxtemp_c,
                minTemp: response.data.forecast.forecastday[1].day.mintemp_c,
                avgWind: response.data.forecast.forecastday[1].day.avgvis_km,
                rainChance: response.data.forecast.forecastday[1].day.daily_chance_of_rain,
                snowChance: response.data.forecast.forecastday[1].day.daily_chance_of_snow,
                conditionIcon: (0, utils_1.handlerConditionCode)(response.data.forecast.forecastday[1].day.condition.code),
                avgCondition: () => `${response.data.forecast.forecastday[1].day.condition.text.toLowerCase()} ${secondDayProp.conditionIcon}`,
                dateRuFormat: (0, utils_1.changeDateRuFormat)(response.data.forecast.forecastday[1].date)
            };
            const secondDayAnswer = `<b>${secondDayProp.dateRuFormat}</b>\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${secondDayProp.avgCondition()}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${secondDayProp.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${secondDayProp.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${secondDayProp.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>${secondDayProp.rainChance}%</b> üåß\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–µ–≥–∞: <b>${secondDayProp.snowChance}%</b> ‚ùÑÔ∏è`;
            const thirdDayProp = {
                maxTemp: response.data.forecast.forecastday[2].day.maxtemp_c,
                minTemp: response.data.forecast.forecastday[2].day.mintemp_c,
                avgWind: response.data.forecast.forecastday[2].day.avgvis_km,
                rainChance: response.data.forecast.forecastday[2].day.daily_chance_of_rain,
                snowChance: response.data.forecast.forecastday[2].day.daily_chance_of_snow,
                conditionIcon: (0, utils_1.handlerConditionCode)(response.data.forecast.forecastday[2].day.condition.code),
                avgCondition: () => `${response.data.forecast.forecastday[2].day.condition.text.toLowerCase()} ${thirdDayProp.conditionIcon}`,
                dateRuFormat: (0, utils_1.changeDateRuFormat)(response.data.forecast.forecastday[2].date)
            };
            const thirdDayAnswer = `<b>${thirdDayProp.dateRuFormat}</b>\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${thirdDayProp.avgCondition()}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${thirdDayProp.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${thirdDayProp.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${thirdDayProp.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>${thirdDayProp.rainChance}%</b> üåß\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–µ–≥–∞: <b>${thirdDayProp.snowChance}%</b> ‚ùÑÔ∏è`;
            //–§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –∏ –ø—è—Ç–æ–≥–æ –¥–Ω—è. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è weatherApi –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ
            const currentDate1 = new Date();
            const fourthDayDate = currentDate1.setDate(currentDate1.getDate() + 3);
            const fourthDayDateISO = currentDate1.toISOString();
            const currentDate2 = new Date();
            const fifthDayDate = currentDate2.setDate(currentDate2.getDate() + 4);
            const fifthDayDateISO = currentDate2.toISOString();
            //–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –¥–µ–Ω—å
            const responseFourthDay = yield apiRequestClient_1.apiRequestClient.forecastDate(city, fourthDayDateISO);
            if (responseFourthDay === constants_1.API_RESULT.UNKNOWN_ERROR) {
                return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            }
            const fourthDayProp = {
                maxTemp: responseFourthDay.data.forecast.forecastday[0].day.maxtemp_c,
                minTemp: responseFourthDay.data.forecast.forecastday[0].day.mintemp_c,
                avgWind: responseFourthDay.data.forecast.forecastday[0].day.avgvis_km,
                rainChance: responseFourthDay.data.forecast.forecastday[0].day.daily_chance_of_rain,
                snowChance: responseFourthDay.data.forecast.forecastday[0].day.daily_chance_of_snow,
                conditionIcon: (0, utils_1.handlerConditionCode)(responseFourthDay.data.forecast.forecastday[0].day.condition.code),
                avgCondition: () => `${responseFourthDay.data.forecast.forecastday[0].day.condition.text.toLowerCase()} ${thirdDayProp.conditionIcon}`,
                dateRuFormat: (0, utils_1.changeDateRuFormat)(responseFourthDay.data.forecast.forecastday[0].date)
            };
            const fourthDayAnswer = `<b>${fourthDayProp.dateRuFormat}</b>\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${fourthDayProp.avgCondition()}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${fourthDayProp.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${fourthDayProp.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${fourthDayProp.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>${fourthDayProp.rainChance}%</b> üåß\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–µ–≥–∞: <b>${fourthDayProp.snowChance}%</b> ‚ùÑÔ∏è`;
            //–ü—è—Ç—ã–π –¥–µ–Ω—å
            const responseFifthDay = yield apiRequestClient_1.apiRequestClient.forecastDate(city, fifthDayDateISO);
            if (responseFifthDay === constants_1.API_RESULT.UNKNOWN_ERROR) {
                return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            }
            const fifthDayProp = {
                maxTemp: responseFifthDay.data.forecast.forecastday[0].day.maxtemp_c,
                minTemp: responseFifthDay.data.forecast.forecastday[0].day.mintemp_c,
                avgWind: responseFifthDay.data.forecast.forecastday[0].day.avgvis_km,
                rainChance: responseFifthDay.data.forecast.forecastday[0].day.daily_chance_of_rain,
                snowChance: responseFifthDay.data.forecast.forecastday[0].day.daily_chance_of_snow,
                conditionIcon: (0, utils_1.handlerConditionCode)(responseFifthDay.data.forecast.forecastday[0].day.condition.code),
                avgCondition: () => `${responseFifthDay.data.forecast.forecastday[0].day.condition.text.toLowerCase()} ${thirdDayProp.conditionIcon}`,
                dateRuFormat: (0, utils_1.changeDateRuFormat)(responseFifthDay.data.forecast.forecastday[0].date)
            };
            const fifthDayAnswer = `<b>${fifthDayProp.dateRuFormat}</b>\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${fifthDayProp.avgCondition()}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${fifthDayProp.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${fifthDayProp.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${fifthDayProp.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>${fifthDayProp.rainChance}%</b> üåß\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–µ–≥–∞: <b>${fifthDayProp.snowChance}%</b> ‚ùÑÔ∏è`;
            return `–ü–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π –≤ –≥–æ—Ä–æ–¥–µ <b>${city}</b>üåá\n\n${firstDayAnswer}\n\n${secondDayAnswer}\n\n${thirdDayAnswer}\n\n${fourthDayAnswer}\n\n${fifthDayAnswer}`;
        });
    }
};
