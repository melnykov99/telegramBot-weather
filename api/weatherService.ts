import {apiRequestClient} from "./apiRequestClient";
import {changeDateRuFormat, handlerConditionCode} from "./utils";
import {API_RESULT, DB_RESULT, outputMessages} from "./constants";
import {usersRepository} from "./usersRepository";
import {AxiosResponse} from "axios";

//Main logic api. Requests to the weather API and generation of a message for the user
export const weatherService = {
    //Checking the city name from the database. If the name is not found or an error occurs, return the corresponding text
    handlerCityError(city: string): string | undefined {
        switch (city) {
            case DB_RESULT.NOT_FOUND:
                return outputMessages.cityNotFound;
            case DB_RESULT.UNKNOWN_ERROR:
                return outputMessages.unknownError;
            default:
                return;
        }
    },
    //Build message with weather forecast for user
    buildWeatherMessage(response: AxiosResponse, city: string): string {
        let weatherData: any = {};
        let weatherMessage: string = response.data.days.length === 1 ? `–ü–æ–≥–æ–¥–∞ ` : response.data.days.length === 3 ? `–ü–æ–≥–æ–¥–∞ –Ω–∞ 3 –¥–Ω—è –≤ –≥–æ—Ä–æ–¥–µ <b>${city}</b>üåá` : `–ü–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π –≤ –≥–æ—Ä–æ–¥–µ <b>${city}</b>üåá`;
        for (let i = 0; i < response.data.days.length; i++) {
            weatherData.maxTemp = Math.round(response.data.days[i].tempmax);
            weatherData.minTemp = Math.round(response.data.days[i].tempmin);
            weatherData.avgWind = response.data.days[i].windspeed;
            weatherData.precipprob = response.data.days[i].precipprob;
            weatherData.preciptype = response.data.days[i].preciptype;
            weatherData.avgCondition = `${response.data.days[i].conditions}`;
            weatherData.todayDateRuFormat = changeDateRuFormat(response.data.days[i].datetime);
            if (response.data.days.length === 1) {
                weatherMessage += `<b>${weatherData.todayDateRuFormat}</b> –≤ –≥–æ—Ä–æ–¥–µ <b>${city}</b>üåá\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${weatherData.avgCondition}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${weatherData.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${weatherData.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${weatherData.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: <b>${weatherData.precipprob}%</b>`;
            } else {
                weatherMessage += `\n\n<b>${weatherData.todayDateRuFormat}</b>\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${weatherData.avgCondition}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${weatherData.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${weatherData.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${weatherData.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: <b>${weatherData.precipprob}%</b>`;
            }
        }
        return weatherMessage;
    },
    //Weather forecast
    async forecastRequest(chatId: number, period: string): Promise<string> {
        const city = await usersRepository.foundCityByUserChatId(chatId);
        const cityError: string | undefined = this.handlerCityError(city);
        if (cityError) {
            return cityError;
        }
        const response: AxiosResponse | API_RESULT.UNKNOWN_ERROR = await apiRequestClient.forecastRequest(city, period);
        if (response === API_RESULT.UNKNOWN_ERROR) {
            return outputMessages.unknownError;
        }
        return this.buildWeatherMessage(response, city);
    }
}