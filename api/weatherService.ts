import {apiRequestClient} from "./apiRequestClient";
import {changeDateRuFormat, handlerConditionCode} from "./utils";
import {API_RESULT, DB_RESULT, outputMessages} from "./constants";
import {usersRepository} from "./usersRepository";
import {AxiosResponse} from "axios";

export const weatherService = {
    //–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ city
    handlerCityError(city: string): string | undefined {
        switch (city) {
            case DB_RESULT.NOT_FOUND:
                return outputMessages.cityNotFound;
            case DB_RESULT.UNKNOWN_ERROR:
                return outputMessages.unknownError;
            default:
                return
        }
    },
    //—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–≥–æ–¥—ã
    buildWeatherMessage(response: AxiosResponse, date: string, city: string): string {
        let weatherData: any = {}
        let weatherMessage: string = `–ü–æ–≥–æ–¥–∞ `
        for(let i = 0; i < response.data.forecast.forecastday.length; i++) {
            weatherData.maxTemp = Math.round(response.data.forecast.forecastday[i].day.maxtemp_c);
            weatherData.minTemp = Math.round(response.data.forecast.forecastday[i].day.mintemp_c);
            weatherData.avgWind = response.data.forecast.forecastday[i].day.avgvis_km;
            weatherData.rainChance = response.data.forecast.forecastday[i].day.daily_chance_of_rain;
            weatherData.snowChance = response.data.forecast.forecastday[i].day.daily_chance_of_snow;
            weatherData.conditionIcon = handlerConditionCode(response.data.forecast.forecastday[i].day.condition.code);
            weatherData.avgCondition = `${response.data.forecast.forecastday[i].day.condition.text.toLowerCase()} ${weatherData.conditionIcon}`;
            weatherData.togetherDateRuFormat = changeDateRuFormat(date);
            weatherData.stringSnowChance = weatherData.minTemp > 0 ? '' : `\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–µ–≥–∞: <b>${weatherData.snowChance}%</b> ‚ùÑÔ∏è`
        }
        return weatherMessage += `<b>${weatherData.togetherDateRuFormat}</b> –≤ –≥–æ—Ä–æ–¥–µ <b>${city}</b> üåá\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${weatherData.avgCondition}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${weatherData.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${weatherData.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${weatherData.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>${weatherData.rainChance}%</b> üåß${weatherData.stringSnowChance}`
    },
    async forecastByDate(chatId: number, date: string): Promise<string> {
        const city = await usersRepository.foundCityByUserChatId(chatId)
        const cityError: string | undefined = this.handlerCityError(city);
        if (cityError) {
            return cityError;
        }
        const response: AxiosResponse | API_RESULT.UNKNOWN_ERROR = await apiRequestClient.forecastDate(city, date)
        if (response === API_RESULT.UNKNOWN_ERROR) {
            return outputMessages.unknownError
        }
        return this.buildWeatherMessage(response, date, city)
    },
    async forecastThreeDays(chatId: number) {
        const city = await usersRepository.foundCityByUserChatId(chatId)
        if (city === DB_RESULT.NOT_FOUND) {
            return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥".'
        }
        if (city === DB_RESULT.UNKNOWN_ERROR) {
            return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        }
        const response = await apiRequestClient.forecastDays(city, 3)
        if (response === API_RESULT.UNKNOWN_ERROR) {
            return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        }
        const firstDayProp = {
            maxTemp: Math.round(response.data.forecast.forecastday[0].day.maxtemp_c),
            minTemp: Math.round(response.data.forecast.forecastday[0].day.mintemp_c),
            avgWind: response.data.forecast.forecastday[0].day.avgvis_km,
            rainChance: response.data.forecast.forecastday[0].day.daily_chance_of_rain,
            snowChance: response.data.forecast.forecastday[0].day.daily_chance_of_snow,
            conditionIcon: handlerConditionCode(response.data.forecast.forecastday[0].day.condition.code),
            avgCondition: () => `${response.data.forecast.forecastday[0].day.condition.text.toLowerCase()} ${firstDayProp.conditionIcon}`,
            dateRuFormat: changeDateRuFormat(response.data.forecast.forecastday[0].date),
            stringSnowChance: () => firstDayProp.minTemp > 0 ? '' : `\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–µ–≥–∞: <b>${firstDayProp.snowChance}%</b> ‚ùÑÔ∏è`
        }
        const firstDayAnswer = `<b>${firstDayProp.dateRuFormat}</b>\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${firstDayProp.avgCondition()}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${firstDayProp.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${firstDayProp.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${firstDayProp.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>${firstDayProp.rainChance}%</b> üåß${firstDayProp.stringSnowChance()}`
        const secondDayProp = {
            maxTemp: Math.round(response.data.forecast.forecastday[1].day.maxtemp_c),
            minTemp: Math.round(response.data.forecast.forecastday[1].day.mintemp_c),
            avgWind: response.data.forecast.forecastday[1].day.avgvis_km,
            rainChance: response.data.forecast.forecastday[1].day.daily_chance_of_rain,
            snowChance: response.data.forecast.forecastday[1].day.daily_chance_of_snow,
            conditionIcon: handlerConditionCode(response.data.forecast.forecastday[1].day.condition.code),
            avgCondition: () => `${response.data.forecast.forecastday[1].day.condition.text.toLowerCase()} ${secondDayProp.conditionIcon}`,
            dateRuFormat: changeDateRuFormat(response.data.forecast.forecastday[1].date),
            stringSnowChance: () => secondDayProp.minTemp > 0 ? '' : `\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–µ–≥–∞: <b>${secondDayProp.snowChance}%</b> ‚ùÑÔ∏è`
        }
        const secondDayAnswer = `<b>${secondDayProp.dateRuFormat}</b>\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${secondDayProp.avgCondition()}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${secondDayProp.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${secondDayProp.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${secondDayProp.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>${secondDayProp.rainChance}%</b> üåß${secondDayProp.stringSnowChance()}`
        const thirdDayProp = {
            maxTemp: Math.round(response.data.forecast.forecastday[2].day.maxtemp_c),
            minTemp: Math.round(response.data.forecast.forecastday[2].day.mintemp_c),
            avgWind: response.data.forecast.forecastday[2].day.avgvis_km,
            rainChance: response.data.forecast.forecastday[2].day.daily_chance_of_rain,
            snowChance: response.data.forecast.forecastday[2].day.daily_chance_of_snow,
            conditionIcon: handlerConditionCode(response.data.forecast.forecastday[2].day.condition.code),
            avgCondition: () => `${response.data.forecast.forecastday[2].day.condition.text.toLowerCase()} ${thirdDayProp.conditionIcon}`,
            dateRuFormat: changeDateRuFormat(response.data.forecast.forecastday[2].date),
            stringSnowChance: () => thirdDayProp.minTemp > 0 ? '' : `\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–µ–≥–∞: <b>${thirdDayProp.snowChance}%</b> ‚ùÑÔ∏è`
        }
        const thirdDayAnswer = `<b>${thirdDayProp.dateRuFormat}</b>\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${thirdDayProp.avgCondition()}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${thirdDayProp.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${thirdDayProp.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${thirdDayProp.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>${thirdDayProp.rainChance}%</b> üåß${thirdDayProp.stringSnowChance()}`
        return `–ü–æ–≥–æ–¥–∞ –Ω–∞ 3 –¥–Ω—è –≤ –≥–æ—Ä–æ–¥–µ <b>${city}üåá</b>\n\n${firstDayAnswer}\n\n${secondDayAnswer}\n\n${thirdDayAnswer}`
    },
    async forecastFiveDays(chatId: number) {
        const city = await usersRepository.foundCityByUserChatId(chatId)
        if (city === DB_RESULT.NOT_FOUND) {
            return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥".'
        }
        if (city === DB_RESULT.UNKNOWN_ERROR) {
            return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        }
        const response = await apiRequestClient.forecastDays(city, 3)
        if (response === API_RESULT.UNKNOWN_ERROR) {
            return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        }
        const firstDayProp = {
            maxTemp: Math.round(response.data.forecast.forecastday[0].day.maxtemp_c),
            minTemp: Math.round(response.data.forecast.forecastday[0].day.mintemp_c),
            avgWind: response.data.forecast.forecastday[0].day.avgvis_km,
            rainChance: response.data.forecast.forecastday[0].day.daily_chance_of_rain,
            snowChance: response.data.forecast.forecastday[0].day.daily_chance_of_snow,
            conditionIcon: handlerConditionCode(response.data.forecast.forecastday[0].day.condition.code),
            avgCondition: () => `${response.data.forecast.forecastday[0].day.condition.text.toLowerCase()} ${firstDayProp.conditionIcon}`,
            dateRuFormat: changeDateRuFormat(response.data.forecast.forecastday[0].date),
            stringSnowChance: () => firstDayProp.minTemp > 0 ? '' : `\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–µ–≥–∞: <b>${firstDayProp.snowChance}%</b> ‚ùÑÔ∏è`
        }
        const firstDayAnswer = `<b>${firstDayProp.dateRuFormat}</b>\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${firstDayProp.avgCondition()}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${firstDayProp.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${firstDayProp.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${firstDayProp.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>${firstDayProp.rainChance}%</b> üåß${firstDayProp.stringSnowChance()}`
        const secondDayProp = {
            maxTemp: Math.round(response.data.forecast.forecastday[1].day.maxtemp_c),
            minTemp: Math.round(response.data.forecast.forecastday[1].day.mintemp_c),
            avgWind: response.data.forecast.forecastday[1].day.avgvis_km,
            rainChance: response.data.forecast.forecastday[1].day.daily_chance_of_rain,
            snowChance: response.data.forecast.forecastday[1].day.daily_chance_of_snow,
            conditionIcon: handlerConditionCode(response.data.forecast.forecastday[1].day.condition.code),
            avgCondition: () => `${response.data.forecast.forecastday[1].day.condition.text.toLowerCase()} ${secondDayProp.conditionIcon}`,
            dateRuFormat: changeDateRuFormat(response.data.forecast.forecastday[1].date),
            stringSnowChance: () => secondDayProp.minTemp > 0 ? '' : `\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–µ–≥–∞: <b>${secondDayProp.snowChance}%</b> ‚ùÑÔ∏è`
        }
        const secondDayAnswer = `<b>${secondDayProp.dateRuFormat}</b>\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${secondDayProp.avgCondition()}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${secondDayProp.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${secondDayProp.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${secondDayProp.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>${secondDayProp.rainChance}%</b> üåß${secondDayProp.stringSnowChance()}`
        const thirdDayProp = {
            maxTemp: Math.round(response.data.forecast.forecastday[2].day.maxtemp_c),
            minTemp: Math.round(response.data.forecast.forecastday[2].day.mintemp_c),
            avgWind: response.data.forecast.forecastday[2].day.avgvis_km,
            rainChance: response.data.forecast.forecastday[2].day.daily_chance_of_rain,
            snowChance: response.data.forecast.forecastday[2].day.daily_chance_of_snow,
            conditionIcon: handlerConditionCode(response.data.forecast.forecastday[2].day.condition.code),
            avgCondition: () => `${response.data.forecast.forecastday[2].day.condition.text.toLowerCase()} ${thirdDayProp.conditionIcon}`,
            dateRuFormat: changeDateRuFormat(response.data.forecast.forecastday[2].date),
            stringSnowChance: () => thirdDayProp.minTemp > 0 ? '' : `\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–µ–≥–∞: <b>${thirdDayProp.snowChance}%</b> ‚ùÑÔ∏è`
        }
        const thirdDayAnswer = `<b>${thirdDayProp.dateRuFormat}</b>\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${thirdDayProp.avgCondition()}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${thirdDayProp.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${thirdDayProp.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${thirdDayProp.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>${thirdDayProp.rainChance}%</b> üåß${thirdDayProp.stringSnowChance()}`

        //–§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –∏ –ø—è—Ç–æ–≥–æ –¥–Ω—è. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è weatherApi –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ
        const currentDate1 = new Date();
        const fourthDayDate = currentDate1.setDate(currentDate1.getDate() + 3);
        const fourthDayDateISO = currentDate1.toISOString();
        const currentDate2 = new Date()
        const fifthDayDate = currentDate2.setDate(currentDate2.getDate() + 4);
        const fifthDayDateISO = currentDate2.toISOString();
        //–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –¥–µ–Ω—å
        const responseFourthDay = await apiRequestClient.forecastDate(city, fourthDayDateISO)
        if (responseFourthDay === API_RESULT.UNKNOWN_ERROR) {
            return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        }
        const fourthDayProp = {
            maxTemp: Math.round(responseFourthDay.data.forecast.forecastday[0].day.maxtemp_c),
            minTemp: Math.round(responseFourthDay.data.forecast.forecastday[0].day.mintemp_c),
            avgWind: responseFourthDay.data.forecast.forecastday[0].day.avgvis_km,
            rainChance: responseFourthDay.data.forecast.forecastday[0].day.daily_chance_of_rain,
            snowChance: responseFourthDay.data.forecast.forecastday[0].day.daily_chance_of_snow,
            conditionIcon: handlerConditionCode(responseFourthDay.data.forecast.forecastday[0].day.condition.code),
            avgCondition: () => `${responseFourthDay.data.forecast.forecastday[0].day.condition.text.toLowerCase()} ${fourthDayProp.conditionIcon}`,
            dateRuFormat: changeDateRuFormat(responseFourthDay.data.forecast.forecastday[0].date),
            stringSnowChance: () => fourthDayProp.minTemp > 0 ? '' : `\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–µ–≥–∞: <b>${fourthDayProp.snowChance}%</b> ‚ùÑÔ∏è`
        }
        const fourthDayAnswer = `<b>${fourthDayProp.dateRuFormat}</b>\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${fourthDayProp.avgCondition()}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${fourthDayProp.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${fourthDayProp.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${fourthDayProp.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>${fourthDayProp.rainChance}%</b> üåß${fourthDayProp.stringSnowChance()}`
        //–ü—è—Ç—ã–π –¥–µ–Ω—å
        const responseFifthDay = await apiRequestClient.forecastDate(city, fifthDayDateISO)
        if (responseFifthDay === API_RESULT.UNKNOWN_ERROR) {
            return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        }
        const fifthDayProp = {
            maxTemp: Math.round(responseFifthDay.data.forecast.forecastday[0].day.maxtemp_c),
            minTemp: Math.round(responseFifthDay.data.forecast.forecastday[0].day.mintemp_c),
            avgWind: responseFifthDay.data.forecast.forecastday[0].day.avgvis_km,
            rainChance: responseFifthDay.data.forecast.forecastday[0].day.daily_chance_of_rain,
            snowChance: responseFifthDay.data.forecast.forecastday[0].day.daily_chance_of_snow,
            conditionIcon: handlerConditionCode(responseFifthDay.data.forecast.forecastday[0].day.condition.code),
            avgCondition: () => `${responseFifthDay.data.forecast.forecastday[0].day.condition.text.toLowerCase()} ${fifthDayProp.conditionIcon}`,
            dateRuFormat: changeDateRuFormat(responseFifthDay.data.forecast.forecastday[0].date),
            stringSnowChance: () => fifthDayProp.minTemp > 0 ? '' : `\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–µ–≥–∞: <b>${fifthDayProp.snowChance}%</b> ‚ùÑÔ∏è`
        }
        const fifthDayAnswer = `<b>${fifthDayProp.dateRuFormat}</b>\n–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è –±—É–¥–µ—Ç <b>${fifthDayProp.avgCondition()}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç <b>${fifthDayProp.minTemp}‚ÑÉ</b> ‚¨áÔ∏è –¥–æ <b>${fifthDayProp.maxTemp}‚ÑÉ</b> ‚¨ÜÔ∏è\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${fifthDayProp.avgWind} –º/—Å</b> üå¨\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>${fifthDayProp.rainChance}%</b> üåß${fifthDayProp.stringSnowChance()}`
        return `–ü–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π –≤ –≥–æ—Ä–æ–¥–µ <b>${city}</b>üåá\n\n${firstDayAnswer}\n\n${secondDayAnswer}\n\n${thirdDayAnswer}\n\n${fourthDayAnswer}\n\n${fifthDayAnswer}`
    }
}